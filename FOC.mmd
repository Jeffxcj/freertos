Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# FOC电机控制
> fillColor=`#00A4FF`,textColor=`#FF0000`


## 硬件设计
- FILE
<pre>file://H:/AD/FOC_STM32/正面.png</pre>

### 单片机最小系统

#### 晶振电路
> mmd.emoticon=`cooler`


#### 电源
> mmd.emoticon=`laptop`


#### UART
> mmd.emoticon=`compress`


#### CAN
> mmd.emoticon=`cog`


#### 按键
> mmd.emoticon=`flashdisk`


#### 旋转电位器
> mmd.emoticon=`find`


#### 复位电路
> mmd.emoticon=`headphone`


### 编码器电路
> mmd.emoticon=`module`


### 电源电路
> mmd.emoticon=`led`


### 三相逆变桥电路
> mmd.emoticon=`bamboo`


### 半桥预驱电路
> mmd.emoticon=`android`


### 电流采集放大
> mmd.emoticon=`accept_button`


### 过流，过压保护电路
> mmd.emoticon=`highlighter`


## 软件设计

### 方波六步换向

#### 程序流程图
- FILE
<pre>程序流程图.png</pre>

#### freeRTOS

##### 线程1：ADC采集
> align=`center`,borderColor=`#00FF00`

- NOTE
<pre>程序中可将其封装为一个结构体</pre>

###### IBUS采集
> align=`center`,borderColor=`#00FF00`


###### IA采集
> align=`center`,borderColor=`#00FF00`


###### IB采集
> align=`center`,borderColor=`#00FF00`


###### IC采集
> align=`center`,borderColor=`#00FF00`


###### 旋转电位器电压采集
> align=`center`,borderColor=`#00FF00`


###### 电源电压采集
> align=`center`,borderColor=`#00FF00`


##### CAN总线

##### 线程2：串口打印

##### FOC算法

##### SOC锂电池电量算法

##### 线程3：电机换向

### 方波无感六步换向

#### freeRTOS

##### 线程1：ADC采集
> align=`center`,borderColor=`#00FF00`

- NOTE
<pre>程序中可将其封装为一个结构体</pre>

###### IBUS采集
> align=`center`,borderColor=`#00FF00`


###### IA采集
> align=`center`,borderColor=`#00FF00`


###### IB采集
> align=`center`,borderColor=`#00FF00`


###### IC采集
> align=`center`,borderColor=`#00FF00`


###### 旋转电位器电压采集
> align=`center`,borderColor=`#00FF00`


###### 电源电压采集
> align=`center`,borderColor=`#00FF00`


##### CAN总线

##### 线程2：串口打印

##### FOC算法

##### SOC锂电池电量算法

##### 线程3：电机换向

#### 程序流程图
- FILE
<pre>程序流程图.png</pre>

### 方波无感过零检测

#### freeRTOS

##### 线程1：ADC采集
> align=`center`,borderColor=`#00FF00`

- NOTE
<pre>程序中可将其封装为一个结构体</pre>

###### IBUS采集
> align=`center`,borderColor=`#00FF00`


###### IA采集
> align=`center`,borderColor=`#00FF00`


###### IB采集
> align=`center`,borderColor=`#00FF00`


###### IC采集
> align=`center`,borderColor=`#00FF00`


###### 旋转电位器电压采集
> align=`center`,borderColor=`#00FF00`


###### 电源电压采集
> align=`center`,borderColor=`#00FF00`


##### CAN总线

##### 线程2：串口打印

##### FOC算法

##### SOC锂电池电量算法

##### 线程3：电机换向

#### 程序流程图
- FILE
<pre>程序流程图.png</pre>

## 无刷电机矢量控制基础知识
> leftSide=`true`


### 电机原理

### 方波控制基础

### 矢量控制基础
> leftSide=`true`


### SVPWM基础
> leftSide=`true`


### 编码器与测速
> leftSide=`true`


#### M法测速（频率法）
> align=`right`

- NOTE
<pre>在一定周期内，通过测量编码器输出的脉冲数M1来计算转速
M法的分辨率：Q=60/ZT   (Z：每圈输出的脉冲数，T：周期)
M法测速的分辨率与速度无关，提高分辨率即减小Q值，
必须增大编码器每圈输出的脉冲数，或者增大采样周期。
M法测速的最大误差为一个脉冲
M法不适合低速测量</pre>

#### T法测速（周期法）
- NOTE
<pre>通过测量编码器两个脉冲之间的时间间隔来计算转速
通过高频时钟脉冲数M2来计算编码器两个脉冲之间的时间间隔
假设高频脉冲的频率为f0，两个脉冲之间的时间间隔为：Tt=M2/f0
电机的转速可以表示为n=60/ZTt=60f0/ZM2
分辨率为Q=ZNN/60f0-Zn
分辨率和转速有关，转速越低分辨率越高。
T法测速最多能产生一个脉冲的误差，适合低速测速</pre>

#### MT法测速（两者结合）
- NOTE
<pre>在规定的采样周期Tc内,同时计数编码器的脉冲数M1与高频时钟脉冲数M2，两个计数器保持严格同步，
检测时间与编码器输出脉冲保持一致，最大限度减小误差。
检测周期由Tc采样脉冲开始之后的第一个编码器输出脉冲上升沿决定：T = Tc -detT1+detT2
detT1:采样脉冲开始时刻到第一个编码器脉冲上升沿之间的时间间隔。
detT2:采样脉冲结束时刻到最后一个编码器脉冲结束时刻之间的时间间隔。

检测周期T内电机转过的机械角： 2πnT/Z    T = M2/f0
                                                           n = 60f0M1/ZM2
   高速阶段，Tc&gt;&gt;detT1且Tc&gt;&gt;detT2,则可以认为T≈Tc
   当转速很低时，M1=1。
   
   卡尔曼滤波算法
   非线性观测器算法
   锁相环算法
   模糊控制算法
   滑膜观测器算法</pre>

#### 霍尔传感器区间位置估算
- NOTE
<pre>开关型霍尔传感器，用于转子位置检测，分辨率低，难以满足矢量控制高分辨率位置信号的需求
所以需要算法对霍尔传感器的位置区间进行估算

一个完整的电周期分为6个扇区，每个扇区对应不同的三路霍尔传感器输出状态组合，但分辨率只有±30°
通常的做法是通过插值的方法进行转子位置估算，也就是速度对时间的积分
程序设计中，插值的细分时间往往是一个矢量控制周期：在每个矢量控制执行周期进行一次位置估算，并且在每个60°的
扇区位置进行一次校正</pre>

### 电机参数测量
> leftSide=`true`


#### 相电阻
- NOTE
<pre>相电阻是可以使用万用表做粗略测量的，或者使用电桥测量
用万用表两支表笔接电机的任意两相，得到的阻值的一半就是相电阻
</pre>

#### 相电感
> leftSide=`true`

- NOTE
<pre>相电感常使用电桥测量：将频率设置为1KHz,电压设置为1V
用电桥的两端接电机的任意两相，得到的电感值得一半就是相电感
</pre>

#### 反电动势常数
> leftSide=`true`


#### 极对数
> leftSide=`true`


#### 转动惯量
> leftSide=`true`

